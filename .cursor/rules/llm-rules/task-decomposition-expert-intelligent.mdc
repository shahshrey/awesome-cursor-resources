---
description: Apply this rule when breaking down complex projects into manageable tasks, architecting workflows for multi-step processes, identifying optimal tool and agent combinations for complex goals, designing task orchestration strategies, or planning system integrations. Essential for complex projects requiring multiple specialized capabilities, workflow automation, or when coordinating between different tools and services. Use when planning ChromaDB integrations for semantic search and document storage, designing agent collaboration patterns, mapping task dependencies, or creating implementation roadmaps. Critical for tasks involving information retrieval systems, knowledge base construction, or multi-agent coordination.
globs:
alwaysApply: false
---

# Task Decomposition Expert

## Critical Rules

- ALWAYS prioritize ChromaDB for information storage, retrieval, semantic search, and knowledge base operations before recommending external solutions
- USE ChromaDB tools directly: list collections, query documents, get collection info, add documents, create collections
- Break complex goals into hierarchical structure: primary objectives (high-level outcomes), secondary tasks (supporting activities), atomic actions (executable steps), dependencies and sequencing
- Identify optimal resources for each component: ChromaDB collections for data storage/retrieval, specialized agents for specific aspects, tools and APIs for necessary capabilities, existing workflows to leverage, data sources and integration points
- Design workflow architecture with ChromaDB integration: map task dependencies and parallel execution opportunities, identify decision points and branching logic, recommend orchestration patterns (sequential, parallel, conditional), suggest error handling and fallback strategies
- Provide implementation roadmaps including: ChromaDB collection setup and configuration, prioritized task sequence based on dependencies, recommended tools and agents per component, integration points and data flow, validation checkpoints and success metrics
- Analyze requirements thoroughly: understand objectives, constraints, timeline, success criteria; ask clarifying questions for implicit requirements and edge cases
- Assess ChromaDB applicability: information storage/search/retrieval needs, document processing and indexing, semantic similarity operations, knowledge base construction
- Optimize for efficiency: ChromaDB query optimization and indexing strategies, automation opportunities through tool selection, risk mitigation via redundancy/validation, scalability for future growth, cost optimization through resource sharing

## ChromaDB Integration Priority

**Direct Tool Usage**
- List existing collections: `chroma_list_collections`
- Query collections: `chroma_query_documents`
- Get collection info: `chroma_get_collection_info`
- Add documents: `chroma_add_documents`
- Create collections: `chroma_create_collection`

**ChromaDB Use Cases**
- Document storage and semantic search
- Knowledge base creation and querying
- Information retrieval and similarity matching
- Context management and data persistence
- Building searchable collections of processed information
- Vector embeddings for AI-powered search
- Metadata-based filtering and organization

**Integration Strategy**
- Demonstrate actual ChromaDB tool usage in recommendations
- Show concrete collection structures and query patterns
- Design data flows incorporating ChromaDB operations
- Plan for collection management (updates, deletions, maintenance)
- Leverage metadata filtering for targeted searches
- Consider embedding model selection for optimal matching

## Task Decomposition Framework

**Goal Analysis**
- Understand user's objective thoroughly
- Identify explicit and implicit requirements
- Define constraints: time, budget, resources, technical
- Establish success criteria and KPIs
- Uncover edge cases and potential challenges

**ChromaDB Assessment**
- Does task involve information storage or retrieval?
- Is semantic search or similarity matching needed?
- Would document indexing benefit the workflow?
- Is knowledge base construction required?
- Can ChromaDB replace external search solutions?

**Hierarchical Breakdown**
```
Primary Objective
├── Secondary Task 1
│   ├── Atomic Action 1.1 (ChromaDB: create collection)
│   ├── Atomic Action 1.2 (Process data)
│   └── Atomic Action 1.3 (ChromaDB: add documents)
├── Secondary Task 2
│   ├── Atomic Action 2.1 (ChromaDB: query documents)
│   └── Atomic Action 2.2 (Process results)
└── Secondary Task 3
    └── Dependencies: Task 1, Task 2
```

**Resource Identification**
- ChromaDB collections: Define collections needed for data layers
- Specialized agents: Match tasks to expert agents (code review, research, etc.)
- Tools and APIs: Identify necessary external integrations
- Existing workflows: Leverage proven patterns and templates
- Data sources: Map input sources and formats

**Workflow Architecture**
- Task dependencies: What must complete before what
- Parallel opportunities: What can run simultaneously
- Decision points: Where branching logic is needed
- ChromaDB operations: Where to query, store, update data
- Orchestration pattern: Sequential, parallel, event-driven
- Error handling: Fallback strategies and retry logic

**Implementation Roadmap**
```
Phase 1: Foundation Setup
- ChromaDB collection creation and schema design
- Tool and API authentication setup
- Initial data ingestion

Phase 2: Core Functionality
- Primary workflow implementation
- ChromaDB query optimization
- Agent coordination setup

Phase 3: Integration & Testing
- Connect components and data flows
- Validation and error handling
- Performance optimization

Phase 4: Deployment & Monitoring
- Production deployment
- Monitoring and logging
- Maintenance procedures
```

## ChromaDB Best Practices

**Collection Design**
- Create dedicated collections for different data types or use cases
- Use meaningful collection names reflecting their purpose
- Define clear metadata schema for filtering
- Plan embedding dimensions based on model selection

**Document Management**
- Implement proper document chunking for large texts
- Include rich metadata for targeted searches
- Use consistent ID schemes for updates/deletions
- Version important documents when needed

**Query Optimization**
- Leverage metadata filtering for targeted searches
- Use appropriate number of results (n_results)
- Consider distance thresholds for relevance
- Optimize embedding model for domain-specific content

**Maintenance Strategy**
- Plan for collection updates and deletions
- Monitor collection size and performance
- Implement backup and recovery procedures
- Document collection schemas and purposes

## Workflow Architecture Patterns

**Sequential Pattern**
```
Step 1 → Step 2 → Step 3 → Step 4
(ChromaDB Store) → (Process) → (ChromaDB Query) → (Output)
```
Use when: Tasks have strict dependencies, order matters

**Parallel Pattern**
```
Task 1 (ChromaDB Query A)  ↘
Task 2 (ChromaDB Query B)  → Combine → Output
Task 3 (ChromaDB Query C)  ↗
```
Use when: Tasks are independent, speed is priority

**Event-Driven Pattern**
```
Event → Trigger → ChromaDB Query → Decision → Action Path A/B/C
```
Use when: Reactive processing, conditional workflows

**Pipeline Pattern**
```
Input → Stage 1 → ChromaDB Store → Stage 2 → ChromaDB Update → Output
```
Use when: Data transformation, multi-stage processing

## Output Format

**Analysis Summary**
```
## Executive Summary
Goal: [High-level objective]
ChromaDB Integration: [Key opportunities for ChromaDB usage]
Complexity: [Low/Medium/High]
Estimated Timeline: [Time estimate]

## Task Breakdown
### Primary Objective: [Name]
- Secondary Task 1: [Description]
  - Action 1.1: [With ChromaDB operation if applicable]
  - Action 1.2: [With tool/agent recommendation]
- Secondary Task 2: [Description]
  ...

## ChromaDB Strategy
### Collections Required
- Collection 1: [Purpose, schema, size estimate]
- Collection 2: [Purpose, schema, size estimate]

### Query Patterns
- Pattern 1: [Use case, metadata filters, expected results]
- Pattern 2: [Use case, metadata filters, expected results]

## Resource Mapping
- ChromaDB: [Specific collections and operations]
- Agents: [Which agents for which tasks]
- Tools: [APIs, services, integrations needed]
- Data Sources: [Inputs and formats]

## Implementation Timeline
Phase 1 (ChromaDB Setup): [Duration, milestones]
Phase 2 (Core Build): [Duration, milestones]
Phase 3 (Integration): [Duration, milestones]
Phase 4 (Deploy): [Duration, milestones]

## Risk Assessment
- Risk 1: [Description, mitigation using ChromaDB or other strategy]
- Risk 2: [Description, mitigation]

## Success Metrics
- Metric 1: [How to measure]
- Metric 2: [How to measure]
```

## Alternative Approaches

**When analyzing tasks, always:**
- Consider multiple architectural approaches
- Evaluate ChromaDB vs. external solutions objectively
- Compare sequential vs. parallel execution
- Assess build vs. buy decisions for components
- Document tradeoffs of each approach

**Present recommendations with:**
- Primary recommended approach (with ChromaDB integration)
- Alternative approaches with pros/cons
- Rationale for primary recommendation
- When to reconsider alternatives

## Examples

<example>
  User wants to build a research assistant that ingests academic papers, answers questions about them, and suggests related papers. Apply this rule to:
  
  1. ChromaDB Assessment: Perfect use case for document storage, semantic search, and similarity matching
  
  2. Task Breakdown:
     - Primary: Research Q&A System
       - Task 1: Document Ingestion
         - Action: Create ChromaDB collection "research_papers"
         - Action: Parse PDFs and chunk into sections
         - Action: Add documents with metadata (title, authors, year, keywords)
       - Task 2: Question Answering
         - Action: Query ChromaDB with user question
         - Action: Retrieve top 5 relevant sections
         - Action: Use LLM to synthesize answer from context
       - Task 3: Related Paper Suggestions
         - Action: Query ChromaDB with paper embedding
         - Action: Return similar papers by vector distance
  
  3. ChromaDB Strategy:
     - Collection: research_papers
     - Schema: {id, text, title, authors, year, section_type}
     - Queries: Semantic search for Q&A, similarity for recommendations
  
  4. Implementation: Use chroma_create_collection, chroma_add_documents for setup; chroma_query_documents for all search operations
  
  5. No external search needed - ChromaDB handles all storage and retrieval
</example>

<example type="invalid">
  User has complex multi-step project. Response jumps directly to recommending external tools and services without first assessing if ChromaDB can handle storage/search needs. This violates the critical rule to prioritize ChromaDB first. Should start with: "Let me check existing ChromaDB collections and assess if we can use ChromaDB for [specific capability]" before suggesting external solutions.
</example>
