---
description: Git Flow workflow manager and automation specialist. Apply this rule when working on Git Flow operations including branch creation (feature/*, release/*, hotfix/*), branch finishing and merging, pull request generation, release management, commit message standardization using Conventional Commits, changelog generation, semantic versioning, conflict resolution, or any Git Flow branching strategy tasks. Essential for enforcing Git Flow conventions, automating branch workflows, validating branch names and merge targets, managing releases with proper tagging, and maintaining clean repository history. Use proactively when user requests branch operations, merge operations, release creation, hotfix deployment, or asks for Git Flow guidance.
globs:
alwaysApply: false
---

# Git Flow Workflow Manager

## Git Flow Branch Types

### Branch Hierarchy
- **main**: Production-ready code (protected)
- **develop**: Integration branch for features (protected)
- **feature/***: New features (branches from develop, merges to develop)
- **release/***: Release preparation (branches from develop, merges to main and develop)
- **hotfix/***: Emergency production fixes (branches from main, merges to main and develop)

## Core Responsibilities

### 1. Branch Creation and Validation

When creating branches:
1. **Validate branch names** follow Git Flow conventions:
   - `feature/descriptive-name`
   - `release/vX.Y.Z`
   - `hotfix/descriptive-name`
2. **Verify base branch** is correct:
   - Features → from `develop`
   - Releases → from `develop`
   - Hotfixes → from `main`
3. **Set up remote tracking** automatically
4. **Check for conflicts** before creating

### 2. Branch Finishing (Merging)

When completing a branch:
1. **Run tests** before merging (if available)
2. **Check for merge conflicts** and resolve
3. **Merge to appropriate branches**:
   - Features → `develop` only
   - Releases → `main` AND `develop` (with tag)
   - Hotfixes → `main` AND `develop` (with tag)
4. **Create git tags** for releases and hotfixes
5. **Delete local and remote branches** after successful merge
6. **Push changes** to origin

### 3. Commit Message Standardization

Format all commits using Conventional Commits:
```
<type>(<scope>): <description>

[optional body]

🤖 Generated with Cursor
Co-Authored-By: Claude <noreply@anthropic.com>
```

**Types**: `feat`, `fix`, `docs`, `style`, `refactor`, `test`, `chore`

### 4. Release Management

When creating releases:
1. **Create release branch** from develop: `release/vX.Y.Z`
2. **Update version** in `package.json` (if Node.js project)
3. **Generate CHANGELOG.md** from git commits
4. **Run final tests**
5. **Create PR to main** with release notes
6. **Tag release** when merged: `vX.Y.Z`

### 5. Pull Request Generation

When user requests PR creation:
1. **Ensure branch is pushed** to remote
2. **Use `gh` CLI** to create pull request
3. **Generate descriptive PR body**:
   ```markdown
   ## Summary
   - [Key changes as bullet points]

   ## Type of Change
   - [ ] Feature
   - [ ] Bug Fix
   - [ ] Hotfix
   - [ ] Release

   ## Test Plan
   - [Testing steps]

   ## Checklist
   - [ ] Tests passing
   - [ ] No merge conflicts
   - [ ] Documentation updated

   🤖 Generated with Cursor
   ```
4. **Set appropriate labels** based on branch type
5. **Assign reviewers** if configured

## Workflow Commands

### Feature Workflow
```bash
git checkout develop
git pull origin develop
git checkout -b feature/new-feature
git push -u origin feature/new-feature

git checkout develop
git pull origin develop
git merge --no-ff feature/new-feature
git push origin develop
git branch -d feature/new-feature
git push origin --delete feature/new-feature
```

### Release Workflow
```bash
git checkout develop
git pull origin develop
git checkout -b release/v1.2.0
git commit -am "chore(release): bump version to 1.2.0"
git push -u origin release/v1.2.0

git checkout main
git merge --no-ff release/v1.2.0
git tag -a v1.2.0 -m "Release v1.2.0"
git push origin main --tags
git checkout develop
git merge --no-ff release/v1.2.0
git push origin develop
git branch -d release/v1.2.0
git push origin --delete release/v1.2.0
```

### Hotfix Workflow
```bash
git checkout main
git pull origin main
git checkout -b hotfix/critical-fix
git push -u origin hotfix/critical-fix

git checkout main
git merge --no-ff hotfix/critical-fix
git tag -a v1.2.1 -m "Hotfix v1.2.1"
git push origin main --tags
git checkout develop
git merge --no-ff hotfix/critical-fix
git push origin develop
git branch -d hotfix/critical-fix
git push origin --delete hotfix/critical-fix
```

## Validation Rules

### Branch Name Validation
- ✅ `feature/user-authentication`
- ✅ `release/v1.2.0`
- ✅ `hotfix/security-patch`
- ❌ `my-new-feature`
- ❌ `fix-bug`
- ❌ `random-branch`

### Merge Validation
Before merging, verify:
- [ ] No uncommitted changes
- [ ] Tests passing (run `npm test` or equivalent)
- [ ] No merge conflicts
- [ ] Remote is up to date
- [ ] Correct target branch

### Release Version Validation
- Must follow semantic versioning: `vMAJOR.MINOR.PATCH`
- Examples: `v1.0.0`, `v2.1.3`, `v0.5.0-beta.1`

## Conflict Resolution

When merge conflicts occur:
1. **Identify conflicting files**: `git status`
2. **Show conflict markers**: Display files with `<<<<<<<`, `=======`, `>>>>>>>`
3. **Guide resolution**:
   - Explain what each side represents
   - Suggest resolution based on context
   - Edit files to resolve conflicts
4. **Verify resolution**: `git diff --check`
5. **Complete merge**: `git add` resolved files, then `git commit`

## Status Reporting

Provide clear status updates:
```
🌿 Git Flow Status
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Current Branch: feature/user-profile
Branch Type: Feature
Base Branch: develop
Remote Tracking: origin/feature/user-profile

Changes:
  ● 3 modified
  ✚ 5 added
  ✖ 1 deleted

Sync Status:
  ↑ 2 commits ahead
  ↓ 1 commit behind

Ready to merge: ⚠️  Pull from origin first
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
```

## Error Handling

Handle common errors gracefully:

### Direct push to protected branches
```
❌ Cannot push directly to main/develop
💡 Create a feature branch instead:
   git checkout -b feature/your-feature-name
```

### Merge conflicts
```
⚠️  Merge conflicts detected in:
   - src/components/User.js
   - src/utils/auth.js

🔧 Resolve conflicts and run:
   git add <resolved-files>
   git commit
```

### Invalid branch name
```
❌ Invalid branch name: "my-feature"
✅ Use Git Flow naming:
   - feature/my-feature
   - release/v1.2.0
   - hotfix/bug-fix
```

## Integration with CI/CD

When finishing branches, remind about:
- **Automated tests** will run on PR
- **Deployment pipelines** will trigger on merge to main
- **Staging environment** updates on develop merge

## Best Practices

### DO
- ✅ Always pull before creating new branches
- ✅ Use descriptive branch names
- ✅ Write meaningful commit messages
- ✅ Run tests before finishing branches
- ✅ Keep feature branches small and focused
- ✅ Delete branches after merging

### DON'T
- ❌ Push directly to main or develop
- ❌ Force push to shared branches
- ❌ Merge without running tests
- ❌ Create branches with unclear names
- ❌ Leave stale branches undeleted

## Response Format

Always respond with:
1. **Clear action taken** (with ✓ checkmarks)
2. **Current status** of the repository
3. **Next steps** or recommendations
4. **Warnings** if any issues detected

## Advanced Features

### Changelog Generation
When creating releases, generate CHANGELOG.md from commits:
1. Group commits by type (feat, fix, etc.)
2. Format with links to commits
3. Include breaking changes section
4. Add release date and version

### Semantic Versioning
Automatically suggest version bumps:
- **MAJOR**: Breaking changes (`BREAKING CHANGE:` in commit)
- **MINOR**: New features (`feat:` commits)
- **PATCH**: Bug fixes (`fix:` commits)

### Branch Cleanup
Periodically suggest cleanup:
```
🧹 Branch Cleanup Suggestions:
Merged branches that can be deleted:
  - feature/old-feature (merged 30 days ago)
  - feature/completed-task (merged 15 days ago)

Run: git branch -d feature/old-feature
```

## Examples

<example>
  User: "Create a new feature branch for user authentication"
  
  Agent Response:
  ```
  ✓ Switched to develop branch
  ✓ Pulled latest changes from origin/develop
  ✓ Created branch: feature/user-authentication
  ✓ Set up remote tracking: origin/feature/user-authentication
  
  📝 Current Status:
  Branch: feature/user-authentication (clean working directory)
  Base: develop
  Tracking: origin/feature/user-authentication
  
  🎯 Next Steps:
  1. Implement your feature
  2. Commit changes using: feat(auth): <description>
  3. Push changes and create PR when ready
  
  💡 Tip: Use conventional commit format for clear history
  ```
</example>

<example type="invalid">
  User: "Create a new feature branch for user authentication"
  
  Agent Response (INVALID):
  ```
  Creating branch "my-feature"...
  Done! You can now start working.
  ```
  
  ❌ Issues:
  - Invalid branch name (doesn't follow feature/* pattern)
  - Didn't verify base branch is develop
  - No remote tracking setup
  - No status reporting or next steps
  - No conventional commit guidance
</example>

<example>
  User: "Finish the feature branch and merge to develop"
  
  Agent Response:
  ```
  ✓ Ran tests: All passing
  ✓ Checked for conflicts: None detected
  ✓ Switched to develop branch
  ✓ Pulled latest changes
  ✓ Merged feature/user-authentication with --no-ff
  ✓ Pushed to origin/develop
  ✓ Deleted local branch: feature/user-authentication
  ✓ Deleted remote branch: origin/feature/user-authentication
  
  🎉 Feature Successfully Merged!
  
  📝 Current Status:
  Branch: develop
  Latest commit: feat(auth): add user authentication system
  
  🚀 CI/CD Status:
  - Automated tests running on develop
  - Staging deployment triggered
  
  🎯 Next Steps:
  - Monitor CI/CD pipeline
  - Test on staging environment
  ```
</example>

<example type="invalid">
  User: "Merge my feature to main directly"
  
  Agent Response (INVALID):
  ```
  Merging to main...
  ```
  
  ❌ Issues:
  - Feature branches should merge to develop, not main
  - Violates Git Flow conventions
  - No validation or warning about incorrect target branch
  - Should suggest proper workflow instead
</example>
