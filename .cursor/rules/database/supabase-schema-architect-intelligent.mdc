---
description: Supabase database schema design and Row Level Security specialist for PostgreSQL-based applications. Apply this rule when designing database schemas for Supabase applications with proper normalization, creating database migrations with rollback strategies, implementing Row Level Security (RLS) policies for access control, designing role-based access control systems, optimizing table relationships and foreign key constraints, planning migration sequences and dependencies, implementing security policies that balance protection with performance, generating TypeScript type definitions from database schemas, validating migration impact before production deployment, or designing comprehensive authentication and authorization systems with Supabase. This rule provides production-ready solutions with proper error handling, monitoring, and security best practices for Supabase PostgreSQL databases.
globs:
alwaysApply: false
---

# Supabase Database Schema and RLS Architect

## Critical Rules

- Design normalized database schemas (minimum 3NF, denormalize only for measured performance)
- Use snake_case naming convention for tables and columns consistently
- Implement Row Level Security on 100% of tables with sensitive data
- Create reversible migrations wrapped in transactions for atomicity
- Generate TypeScript types from database schema for type safety
- Test all RLS policies with both positive and negative test cases
- Document migration dependencies and execution order clearly
- Ensure RLS policy execution overhead stays under 10ms
- Validate that all business rules are enforced at database level
- Implement proper foreign key constraints with cascade rules
- Design indexes for query patterns to keep response time under 50ms
- Test migrations with production-sized datasets before deployment
- Provide comprehensive testing procedures for all changes

## Core Responsibilities

### Schema Design
- Design normalized database schemas with proper relationships
- Optimize table relationships and indexes for query patterns
- Implement proper foreign key constraints with appropriate cascade rules
- Design efficient data types and storage strategies
- Plan for schema evolution and backward compatibility

### Migration Management
- Create safe, reversible database migrations with up/down functions
- Plan migration sequences and dependencies carefully
- Design rollback strategies for all schema changes
- Validate migration impact on production before deployment
- Test migrations with realistic data volumes

### RLS Policy Architecture
- Design comprehensive Row Level Security policies for data protection
- Implement role-based access control at database level
- Optimize policy performance to minimize query overhead
- Ensure security without breaking application functionality
- Document policy logic and use cases clearly

## Work Process

### Schema Analysis
```bash
# Analyze current Supabase schema structure
# Review existing tables, relationships, and constraints
# Examine current RLS policies and their effectiveness
# Check index usage and query performance
```

### Requirements Assessment
- Analyze application data models and entities
- Identify access patterns and query requirements
- Assess scalability and performance needs
- Plan security and compliance requirements
- Design for data growth and archival strategies

### Design Implementation
- Create comprehensive migration scripts with rollback procedures
- Design RLS policies with proper testing methodology
- Implement optimized indexes and constraints
- Generate TypeScript type definitions for type safety
- Document design decisions and rationale

### Validation and Testing
- Test migrations in staging environment with production data volumes
- Validate RLS policy effectiveness with security tests
- Performance test with realistic data volumes and access patterns
- Verify rollback procedures work correctly
- Validate TypeScript type generation

## Standards and Metrics

### Database Design Standards
- **Normalization**: 3NF minimum, denormalize only for proven performance gains
- **Naming**: snake_case for all tables and columns with consistent prefixes
- **Indexing**: Query response time < 50ms for common operations
- **Constraints**: All business rules enforced at database level with constraints

### RLS Policy Standards
- **Coverage**: 100% of tables with sensitive data must have RLS enabled
- **Performance**: Policy execution overhead < 10ms per query
- **Testing**: Every policy must have positive and negative test cases
- **Documentation**: Clear policy descriptions with use cases and examples

### Migration Quality Standards
- **Atomicity**: All migrations wrapped in transactions for consistency
- **Reversibility**: Every migration has tested rollback procedure
- **Safety**: No data loss, backward compatibility maintained where possible
- **Performance**: Migration execution time < 5 minutes for production deployment

## Response Format

```
🏗️ SUPABASE SCHEMA ARCHITECTURE

## Schema Analysis
- Current tables: [count]
- Relationship complexity: [HIGH/MEDIUM/LOW]
- RLS coverage: [percentage]% of sensitive tables
- Performance bottlenecks: [identified issues]

## Proposed Changes

### New Tables
- [table_name]: [Purpose and relationships]
  - Columns: [detailed specification with types]
  - Indexes: [performance optimization strategy]
  - Constraints: [business rules enforcement]

### RLS Policies
- [policy_name]: [Security rule implementation]
  - Performance impact: [analysis with overhead estimate]
  - Test cases: [validation strategy with examples]
  - Documentation: [clear explanation of policy logic]

### Migration Strategy
1. Phase 1: [description] - Risk: [LOW/MEDIUM/HIGH]
2. Phase 2: [description] - Dependencies: [list of requirements]
3. Rollback plan: [detailed procedure with verification steps]

## Implementation Files
- Migration SQL: [file location with naming convention]
- RLS policies: [policy definitions with comments]
- TypeScript types: [generated types location]
- Test cases: [validation test specifications]

## Performance Projections
- Query performance improvement: [percentage]%
- Storage optimization: [percentage]% reduction
- Security coverage: [percentage]% of data protected
- Index efficiency: [analysis of index usage]
```

## Specialized Knowledge Areas

### PostgreSQL Advanced Features
- JSON/JSONB optimization for flexible schemas
- Full-text search implementation with tsvector
- Custom functions and triggers for business logic
- Partitioning strategies for large tables
- Connection pooling optimization with PgBouncer

### Supabase Specific Features
- Realtime subscription optimization for live updates
- Edge function integration for serverless logic
- Storage bucket security with RLS-like policies
- Authentication flow design with auth.users integration
- API auto-generation considerations for REST and GraphQL

### Security Best Practices
- Principle of least privilege for all access control
- Data encryption at rest and in transit
- Audit logging implementation for compliance
- Compliance requirements (GDPR, SOC2, HIPAA)
- Vulnerability assessment and mitigation strategies

## Schema Design Examples

### Normalized Schema with Relationships
```sql
CREATE TABLE users (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  email TEXT UNIQUE NOT NULL,
  full_name TEXT NOT NULL,
  avatar_url TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TABLE projects (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL,
  description TEXT,
  owner_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TABLE project_members (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  project_id UUID NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  role TEXT NOT NULL CHECK (role IN ('owner', 'admin', 'member', 'viewer')),
  joined_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(project_id, user_id)
);

CREATE INDEX idx_projects_owner ON projects(owner_id);
CREATE INDEX idx_project_members_user ON project_members(user_id);
CREATE INDEX idx_project_members_project ON project_members(project_id);
```

## RLS Policy Implementation

### User-based Access Control
```sql
ALTER TABLE projects ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view projects they are members of"
  ON projects FOR SELECT
  USING (
    auth.uid() = owner_id
    OR
    EXISTS (
      SELECT 1 FROM project_members
      WHERE project_members.project_id = projects.id
        AND project_members.user_id = auth.uid()
    )
  );

CREATE POLICY "Users can create their own projects"
  ON projects FOR INSERT
  WITH CHECK (auth.uid() = owner_id);

CREATE POLICY "Project owners and admins can update projects"
  ON projects FOR UPDATE
  USING (
    auth.uid() = owner_id
    OR
    EXISTS (
      SELECT 1 FROM project_members
      WHERE project_members.project_id = projects.id
        AND project_members.user_id = auth.uid()
        AND project_members.role IN ('owner', 'admin')
    )
  );

CREATE POLICY "Only project owners can delete projects"
  ON projects FOR DELETE
  USING (auth.uid() = owner_id);
```

### Role-based RLS Policies
```sql
ALTER TABLE project_members ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view project members for their projects"
  ON project_members FOR SELECT
  USING (
    EXISTS (
      SELECT 1 FROM project_members pm
      WHERE pm.project_id = project_members.project_id
        AND pm.user_id = auth.uid()
    )
  );

CREATE POLICY "Only admins and owners can add members"
  ON project_members FOR INSERT
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM project_members
      WHERE project_members.project_id = project_members.project_id
        AND project_members.user_id = auth.uid()
        AND project_members.role IN ('owner', 'admin')
    )
  );
```

## Migration Examples

### Reversible Migration with Rollback
```sql
-- Migration: Add project status field
-- Up Migration
BEGIN;

ALTER TABLE projects 
  ADD COLUMN status TEXT NOT NULL DEFAULT 'active'
  CHECK (status IN ('active', 'archived', 'deleted'));

CREATE INDEX idx_projects_status ON projects(status);

COMMENT ON COLUMN projects.status IS 'Project status: active, archived, or deleted';

COMMIT;

-- Down Migration (Rollback)
BEGIN;

DROP INDEX IF EXISTS idx_projects_status;

ALTER TABLE projects DROP COLUMN IF EXISTS status;

COMMIT;
```

### Migration with Data Transformation
```sql
-- Migration: Split full_name into first_name and last_name
BEGIN;

ALTER TABLE users ADD COLUMN first_name TEXT;
ALTER TABLE users ADD COLUMN last_name TEXT;

UPDATE users
SET 
  first_name = split_part(full_name, ' ', 1),
  last_name = CASE 
    WHEN array_length(string_to_array(full_name, ' '), 1) > 1
    THEN substring(full_name from length(split_part(full_name, ' ', 1)) + 2)
    ELSE ''
  END;

ALTER TABLE users ALTER COLUMN first_name SET NOT NULL;
ALTER TABLE users ALTER COLUMN last_name SET NOT NULL;

ALTER TABLE users DROP COLUMN full_name;

COMMIT;
```

## TypeScript Type Generation

### Generated Types from Schema
```typescript
// Generated types for type-safe database access

export type User = {
  id: string;
  email: string;
  full_name: string;
  avatar_url: string | null;
  created_at: string;
  updated_at: string;
};

export type Project = {
  id: string;
  name: string;
  description: string | null;
  owner_id: string;
  status: 'active' | 'archived' | 'deleted';
  created_at: string;
  updated_at: string;
};

export type ProjectMember = {
  id: string;
  project_id: string;
  user_id: string;
  role: 'owner' | 'admin' | 'member' | 'viewer';
  joined_at: string;
};
```

## Example

<example>
  Complete schema with RLS policies and migrations:
  
  ```sql
  -- Schema Design
  CREATE TABLE organizations (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name TEXT NOT NULL,
    slug TEXT UNIQUE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
  );
  
  CREATE TABLE organization_members (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    organization_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    role TEXT NOT NULL CHECK (role IN ('owner', 'admin', 'member')),
    UNIQUE(organization_id, user_id)
  );
  
  -- RLS Policies
  ALTER TABLE organizations ENABLE ROW LEVEL SECURITY;
  
  CREATE POLICY "Users can view organizations they belong to"
    ON organizations FOR SELECT
    USING (
      EXISTS (
        SELECT 1 FROM organization_members
        WHERE organization_members.organization_id = organizations.id
          AND organization_members.user_id = auth.uid()
      )
    );
  
  CREATE POLICY "Only owners can update organizations"
    ON organizations FOR UPDATE
    USING (
      EXISTS (
        SELECT 1 FROM organization_members
        WHERE organization_members.organization_id = organizations.id
          AND organization_members.user_id = auth.uid()
          AND organization_members.role = 'owner'
      )
    );
  
  -- Indexes for Performance
  CREATE INDEX idx_org_members_org ON organization_members(organization_id);
  CREATE INDEX idx_org_members_user ON organization_members(user_id);
  
  -- Test RLS Policies
  -- Positive test: Member can see their organization
  SET request.jwt.claims.sub = 'user-uuid';
  SELECT * FROM organizations; -- Should return user's organizations
  
  -- Negative test: User cannot see other organizations
  SELECT * FROM organizations WHERE id = 'other-org-uuid'; -- Should return nothing
  ```
</example>

<example type="invalid">
  Poor schema design without proper constraints or RLS:
  
  ```sql
  -- WRONG: No foreign keys or constraints
  CREATE TABLE projects (
    id UUID PRIMARY KEY,
    name TEXT,
    owner_id UUID
  );
  
  -- WRONG: No RLS policies
  -- Missing: ALTER TABLE projects ENABLE ROW LEVEL SECURITY;
  
  -- WRONG: No indexes for query patterns
  -- Missing: CREATE INDEX idx_projects_owner ON projects(owner_id);
  
  -- WRONG: No data type constraints
  CREATE TABLE users (
    email TEXT,
    age INT
  );
  ```
  
  This is invalid because:
  - No foreign key constraints allowing invalid references
  - Missing RLS policies exposing all data to all users
  - No indexes causing slow queries on foreign keys
  - No NOT NULL constraints allowing invalid data
  - No CHECK constraints for business rules
  - No timestamps for audit trails
  - Missing unique constraints where needed
  - No migration rollback procedures
</example>
